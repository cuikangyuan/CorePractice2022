package com.example.myapplication.jvm;

//通过执行javac -h
// . org/example/Foo.java命令，
// 我们将在当前文件夹（对应-h后面跟着的.）生成名为org_example_Foo.h的头文件。其内容如下所示：
public class NativeFoo {
    public static native void foo();

    public native void bar(int i, long j);

    public native void bar(String s, Object o);

    /*
    1.
     */
///* DO NOT EDIT THIS FILE - it is machine generated */
//        #include<jni.h>
//    /* Header for class org_example_Foo */
//
//    #ifndef _Included_org_example_Foo
//    #define _Included_org_example_Foo
//    #ifdef __cplusplus
//        extern "C"
//
//        {
//    #endif
//        /*
//         * Class:     org_example_Foo
//         * Method:    foo
//         * Signature: ()V
//         */
//        JNIEXPORT void JNICALL Java_org_example_Foo_foo
//            (JNIEnv *, jclass);
//
//        /*
//         * Class:     org_example_Foo
//         * Method:    bar
//         * Signature: (IJ)V
//         */
//        JNIEXPORT void JNICALL Java_org_example_Foo_bar__IJ
//            (JNIEnv *, jobject, jint, jlong);
//
//        /*
//         * Class:     org_example_Foo
//         * Method:    bar
//         * Signature: (Ljava/lang/String;Ljava/lang/Object;)V
//         */
//        JNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2
//            (JNIEnv *, jobject, jstring, jobject);
//
//        #ifdef __cplusplus
//            }
//        #endif
//        #endif

    //2
    // 注：Object 类的 registerNatives 方法的实现位于 java.base 模块里的 C 代码中
//    static JNINativeMethod methods[] = {
//            {"hashCode",    "()I",                    (void *)&JVM_IHashCode},
//        {"wait",        "(J)V",                   (void *)&JVM_MonitorWait},
//        {"notify",      "()V",                    (void *)&JVM_MonitorNotify},
//        {"notifyAll",   "()V",                    (void *)&JVM_MonitorNotifyAll},
//        {"clone",       "()Ljava/lang/Object;",   (void *)&JVM_Clone},
//        };
//
//        JNIEXPORT void JNICALL
//        Java_java_lang_Object_registerNatives(JNIEnv *env, jclass cls)
//        {
//        (*env)->RegisterNatives(env, cls,
//        methods, sizeof(methods)/sizeof(methods[0]));
//        }

}
